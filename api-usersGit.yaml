openapi: 3.0.1
info:
  title: Api Demo
  contact:
    name: Luciano SÃ¡nchez
  version: 0.0.1
servers:
- url: https://dev.paymind.mx/auth
paths:
  /users:
    get:
      tags:
      - users-controller
      operationId: filter
      parameters:
      - name: id
        in: query
        required: false
        schema:
          type: integer
          format: int64
      - name: name
        in: query
        required: false
        schema:
          type: string
      - name: username
        in: query
        required: false
        schema:
          type: string
      - name: password
        in: query
        required: false
        schema:
          type: string
      - name: email
        in: query
        required: false
        schema:
          type: string
      - name: role
        in: query
        required: false
        schema:
          type: string
          enum:
          - USER_ADMIN
          - USER_SUB_MERCHANT
          - USER_SUB_MERCHANT_ADMIN
          - USER_MERCHANT_ADMIN
          - USER_MERCHANT_GROUP
          - USER_SUPER_ADMIN
      - name: attempts
        in: query
        required: false
        schema:
          type: integer
          format: int32
      - name: status
        in: query
        required: false
        schema:
          type: string
          enum:
          - BLOCKED_BY_ATTEMPTS
          - BLOCKED_BY_ADMIN
          - BLOCKED_BY_EMAIL_NOT_VERIFIED
          - NONE
      - name: enabled
        in: query
        required: false
        schema:
          type: boolean
      - name: activated
        in: query
        required: false
        schema:
          type: boolean
      - name: createdAt
        in: query
        required: false
        schema:
          type: string
          format: date-time
      - name: updatedAt
        in: query
        required: false
        schema:
          type: string
          format: date-time
      - name: createdBy
        in: query
        required: false
        schema:
          type: integer
          format: int64
      - name: updatedBy
        in: query
        required: false
        schema:
          type: integer
          format: int64
      - name: role_id
        in: query
        required: false
        schema:
          type: integer
          format: int64
      - name: fields
        in: query
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property,(asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
      security:
      - bearerAuth: []
    post:
      tags:
      - users-controller
      summary: Create user
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserModel'
            examples:
              Create User:
                description: Create User
                value:
                  name: user
                  username: "{% uuid 'v1' %}"
                  password: adm0n2
                  email: admin
                  role: USER_ADMIN
                  attempts: 3
                  status: NONE
                  enabled: true
                  activated: true
        required: true
      responses:
        "200":
          description: create a user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserModel'
        "400":
          description: Invalid id supplied
        "404":
          description: user not found
      security:
      - bearerAuth: []
  /users/{userId}:
    get:
      tags:
      - users-controller
      summary: To get a user by id
      operationId: read
      parameters:
      - name: userId
        in: path
        description: id of user to be searched
        required: true
        schema:
          type: integer
          format: int64
      - name: fields
        in: query
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
      security:
      - bearerAuth: []
    post:
      tags:
      - users-controller
      operationId: update
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Response'
      security:
      - bearerAuth: []
    delete:
      tags:
      - users-controller
      operationId: delete
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
      security:
      - bearerAuth: []
  /users/merchants/{merchantId}/users:
    post:
      tags:
      - users-controller
      operationId: create_1
      parameters:
      - name: merchantId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserModel'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Response'
      security:
      - bearerAuth: []
  /users/merchants/{merchantId}/sub-merchants/{subMerchantId}/users:
    post:
      tags:
      - users-controller
      operationId: create_2
      parameters:
      - name: merchantId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: subMerchantId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserModel'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Response'
      security:
      - bearerAuth: []
  /users/merchant-group/{merchantGroupId}/users:
    post:
      tags:
      - users-controller
      operationId: createMerchantGroup
      parameters:
      - name: merchantGroupId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserModel'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Response'
      security:
      - bearerAuth: []
  /userPage:
    get:
      tags:
      - user-page-controller
      operationId: readAll
      parameters:
      - name: resource
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/UserPageModel'
      - name: fields
        in: query
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: pageable
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Pageable'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
    post:
      tags:
      - user-page-controller
      operationId: createUserPage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPageModel'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /userPage/delete:
    post:
      tags:
      - user-page-controller
      operationId: remove
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPageModel'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /users/filterByName:
    get:
      tags:
      - users-controller
      operationId: findByUserName
      parameters:
      - name: id
        in: query
        required: false
        schema:
          type: integer
          format: int64
      - name: name
        in: query
        required: false
        schema:
          type: string
      - name: username
        in: query
        required: false
        schema:
          type: string
      - name: password
        in: query
        required: false
        schema:
          type: string
      - name: email
        in: query
        required: false
        schema:
          type: string
      - name: role
        in: query
        required: false
        schema:
          type: string
          enum:
          - USER_ADMIN
          - USER_SUB_MERCHANT
          - USER_SUB_MERCHANT_ADMIN
          - USER_MERCHANT_ADMIN
          - USER_MERCHANT_GROUP
          - USER_SUPER_ADMIN
      - name: attempts
        in: query
        required: false
        schema:
          type: integer
          format: int32
      - name: status
        in: query
        required: false
        schema:
          type: string
          enum:
          - BLOCKED_BY_ATTEMPTS
          - BLOCKED_BY_ADMIN
          - BLOCKED_BY_EMAIL_NOT_VERIFIED
          - NONE
      - name: enabled
        in: query
        required: false
        schema:
          type: boolean
      - name: activated
        in: query
        required: false
        schema:
          type: boolean
      - name: createdAt
        in: query
        required: false
        schema:
          type: string
          format: date-time
      - name: updatedAt
        in: query
        required: false
        schema:
          type: string
          format: date-time
      - name: createdBy
        in: query
        required: false
        schema:
          type: integer
          format: int64
      - name: updatedBy
        in: query
        required: false
        schema:
          type: integer
          format: int64
      - name: role_id
        in: query
        required: false
        schema:
          type: integer
          format: int64
      - name: fields
        in: query
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property,(asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        schema:
          type: array
          items:
            type: string
      - name: merchantId
        in: query
        required: false
        schema:
          type: integer
          format: int64
          default: 0
      - name: subMerchantId
        in: query
        required: false
        schema:
          type: integer
          format: int64
          default: 0
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
      security:
      - bearerAuth: []
  /users/checkUsername:
    get:
      tags:
      - users-controller
      operationId: checkUserName
      parameters:
      - name: username
        in: query
        required: false
        schema:
          type: string
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        schema:
          minimum: 1
          type: integer
          default: 10
      - name: sort
        in: query
        description: "Sorting criteria in the format: property,(asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
      security:
      - bearerAuth: []
  /userPage/{userId}:
    get:
      tags:
      - user-page-controller
      operationId: findPagesFromUser
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: resource
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/UserPageModel'
      - name: fields
        in: query
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: pageable
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Pageable'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /csrf:
    get:
      tags:
      - csrf-controller
      operationId: csrf
      parameters:
      - name: token
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/CsrfToken'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CsrfToken'
    put:
      tags:
      - csrf-controller
      operationId: csrf_3
      parameters:
      - name: token
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/CsrfToken'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CsrfToken'
    post:
      tags:
      - csrf-controller
      operationId: csrf_2
      parameters:
      - name: token
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/CsrfToken'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CsrfToken'
    delete:
      tags:
      - csrf-controller
      operationId: csrf_5
      parameters:
      - name: token
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/CsrfToken'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CsrfToken'
    options:
      tags:
      - csrf-controller
      operationId: csrf_6
      parameters:
      - name: token
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/CsrfToken'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CsrfToken'
    head:
      tags:
      - csrf-controller
      operationId: csrf_1
      parameters:
      - name: token
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/CsrfToken'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CsrfToken'
    patch:
      tags:
      - csrf-controller
      operationId: csrf_4
      parameters:
      - name: token
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/CsrfToken'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CsrfToken'
  /login:
    post:
      tags:
      - login-endpoint
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: OK
        "403":
          description: Forbidden
components:
  schemas:
    UserCredentialModel:
      type: object
      properties:
        userId:
          type: integer
          format: int64
    UserModel:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: integer
          format: int64
        updatedAt:
          type: string
          format: date-time
        updatedBy:
          type: integer
          format: int64
        id:
          type: integer
          format: int64
        name:
          type: string
        username:
          type: string
        password:
          type: string
          writeOnly: true
        email:
          type: string
        role:
          type: string
          enum:
          - USER_ADMIN
          - USER_SUB_MERCHANT
          - USER_SUB_MERCHANT_ADMIN
          - USER_MERCHANT_ADMIN
          - USER_MERCHANT_GROUP
          - USER_SUPER_ADMIN
        attempts:
          type: integer
          format: int32
        status:
          type: string
          enum:
          - BLOCKED_BY_ATTEMPTS
          - BLOCKED_BY_ADMIN
          - BLOCKED_BY_EMAIL_NOT_VERIFIED
          - NONE
        enabled:
          type: boolean
        activated:
          type: boolean
        role_id:
          type: integer
          format: int64
        userCredential:
          $ref: '#/components/schemas/UserCredentialModel'
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        username:
          type: string
        password:
          type: string
        email:
          type: string
        role:
          type: string
          enum:
          - USER_ADMIN
          - USER_SUB_MERCHANT
          - USER_SUB_MERCHANT_ADMIN
          - USER_MERCHANT_ADMIN
          - USER_MERCHANT_GROUP
          - USER_SUPER_ADMIN
        attempts:
          type: integer
          format: int32
        status:
          type: string
          enum:
          - BLOCKED_BY_ATTEMPTS
          - BLOCKED_BY_ADMIN
          - BLOCKED_BY_EMAIL_NOT_VERIFIED
          - NONE
        enabled:
          type: boolean
        activated:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        createdBy:
          type: integer
          format: int64
        updatedBy:
          type: integer
          format: int64
        role_id:
          type: integer
          format: int64
    Response:
      type: object
      properties:
        status:
          type: string
          enum:
          - 100 CONTINUE
          - 101 SWITCHING_PROTOCOLS
          - 102 PROCESSING
          - 103 CHECKPOINT
          - 200 OK
          - 201 CREATED
          - 202 ACCEPTED
          - 203 NON_AUTHORITATIVE_INFORMATION
          - 204 NO_CONTENT
          - 205 RESET_CONTENT
          - 206 PARTIAL_CONTENT
          - 207 MULTI_STATUS
          - 208 ALREADY_REPORTED
          - 226 IM_USED
          - 300 MULTIPLE_CHOICES
          - 301 MOVED_PERMANENTLY
          - 302 FOUND
          - 302 MOVED_TEMPORARILY
          - 303 SEE_OTHER
          - 304 NOT_MODIFIED
          - 305 USE_PROXY
          - 307 TEMPORARY_REDIRECT
          - 308 PERMANENT_REDIRECT
          - 400 BAD_REQUEST
          - 401 UNAUTHORIZED
          - 402 PAYMENT_REQUIRED
          - 403 FORBIDDEN
          - 404 NOT_FOUND
          - 405 METHOD_NOT_ALLOWED
          - 406 NOT_ACCEPTABLE
          - 407 PROXY_AUTHENTICATION_REQUIRED
          - 408 REQUEST_TIMEOUT
          - 409 CONFLICT
          - 410 GONE
          - 411 LENGTH_REQUIRED
          - 412 PRECONDITION_FAILED
          - 413 PAYLOAD_TOO_LARGE
          - 413 REQUEST_ENTITY_TOO_LARGE
          - 414 URI_TOO_LONG
          - 414 REQUEST_URI_TOO_LONG
          - 415 UNSUPPORTED_MEDIA_TYPE
          - 416 REQUESTED_RANGE_NOT_SATISFIABLE
          - 417 EXPECTATION_FAILED
          - 418 I_AM_A_TEAPOT
          - 419 INSUFFICIENT_SPACE_ON_RESOURCE
          - 420 METHOD_FAILURE
          - 421 DESTINATION_LOCKED
          - 422 UNPROCESSABLE_ENTITY
          - 423 LOCKED
          - 424 FAILED_DEPENDENCY
          - 425 TOO_EARLY
          - 426 UPGRADE_REQUIRED
          - 428 PRECONDITION_REQUIRED
          - 429 TOO_MANY_REQUESTS
          - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
          - 451 UNAVAILABLE_FOR_LEGAL_REASONS
          - 500 INTERNAL_SERVER_ERROR
          - 501 NOT_IMPLEMENTED
          - 502 BAD_GATEWAY
          - 503 SERVICE_UNAVAILABLE
          - 504 GATEWAY_TIMEOUT
          - 505 HTTP_VERSION_NOT_SUPPORTED
          - 506 VARIANT_ALSO_NEGOTIATES
          - 507 INSUFFICIENT_STORAGE
          - 508 LOOP_DETECTED
          - 509 BANDWIDTH_LIMIT_EXCEEDED
          - 510 NOT_EXTENDED
          - 511 NETWORK_AUTHENTICATION_REQUIRED
        statusCode:
          type: integer
          format: int32
        message:
          type: string
        data:
          type: object
    PageModel:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: integer
          format: int64
        updatedAt:
          type: string
          format: date-time
        updatedBy:
          type: integer
          format: int64
        id:
          type: integer
          format: int64
        name:
          type: string
        url:
          type: string
        categoryId:
          type: integer
          format: int64
    UserPageModel:
      type: object
      properties:
        pageId:
          type: integer
          format: int64
        pages:
          $ref: '#/components/schemas/PageModel'
        userId:
          type: integer
          format: int64
        user:
          $ref: '#/components/schemas/UserModel'
    Pageable:
      type: object
      properties:
        page:
          minimum: 0
          type: integer
          format: int32
        size:
          minimum: 1
          type: integer
          format: int32
        sort:
          type: array
          items:
            type: string
    CsrfToken:
      type: object
      properties:
        parameterName:
          type: string
        headerName:
          type: string
        token:
          type: string
  securitySchemes:
    bearerAuth:
      type: http
      in: header
      scheme: bearer
      bearerFormat: JWT
